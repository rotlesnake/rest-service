!function(t,i){"object"==typeof exports&&"undefined"!=typeof module?i(exports):"function"==typeof define&&define.amd?define(["exports"],i):i((t="undefined"!=typeof globalThis?globalThis:t||self).dbquery={})}(this,(function(t){"use strict";t.Model=class{constructor(t,i,e){this.$config={},this.$config.tablename=t,this.$config.axios=i,this.$config.baseURL=e,this.clearConfig()}clearConfig(){this.$config.fields={},this.$config.filters={},this.$config.filter_oper={},this.$config.sorts=[],this.$config.page=1,this.$config.limit=100,this.$config.payload=null}primaryKey(){return"id"}getPrimaryKey(){return this[this.primaryKey()]}hasId(){const t=this.getPrimaryKey();return this.isValidId(t)}isValidId(t){return!!t}select(...t){if(0===t.length)throw new Error("You must specify the fields on select() method.");return("string"==typeof t[0]||Array.isArray(t[0]))&&(this.$config.fields[this.$config.tablename]=t.join(",")),this}where(t,i,e){let s=null;return void 0===e?e=i:s=i,this.$config.filters[t]=e,s&&(this.$config.filter_oper[t]=s),this}whereIn(t,i){if(!Array.isArray(i))throw new Error("The second argument on whereIn() method must be an array.");return this.$config.filters[t]=i.join(","),this}orderBy(...t){return this.sortBy(t)}sortBy(...t){return this.$config.sorts=Array.isArray(t[0])?t[0]:t,this}page(t){return this.$config.page=t,this}limit(t){return this.$config.limit=t,this}params(t){if(void 0===t||"object"!=typeof t)throw new Error("You must pass a payload/object as param.");return this.$config.payload=t,this}_setInstance(t){this.clearConfig();t.data;let i=new this.constructor(this.$config.tablename,this.$config.axios,this.$config.baseURL);return Object.assign(i,t),i}_getInstance(){let t={};return Object.assign(t,this),delete t.$config,t}new(){return this._setInstance({})}endpoint(){return this.hasId()?`${this.$config.baseURL}/${this.$config.tablename}/${this.getPrimaryKey()}`:`${this.$config.baseURL}/${this.$config.tablename}`}first(){return this.params({first:!0}),this.get()}find(t){if(void 0===t)throw new Error("You must specify the param on find() method.");let i=`${`${this.$config.baseURL}/${this.$config.tablename}`}/${t}${this._query()}`;return this.$config.axios({url:i,method:"GET"}).then((t=>this._setInstance(t.data)))}get(){let t=`${`${this.$config.baseURL}/${this.$config.tablename}`}${this._query()}`;return this.$config.axios({url:t,method:"GET"}).then((t=>this._setInstance(t.data)))}all(){return this.get()}modelInfo(){let t=`${`${this.$config.baseURL}/${this.$config.tablename}`}/modelInfo()`;return this.$config.axios({url:t,method:"GET"}).then((t=>t.data))}delete(){if(!this.hasId())throw new Error("This model has a empty ID.");return this.$config.axios({method:"DELETE",url:this.endpoint()}).then((t=>t))}save(){return this.hasId()?this._update():this._create()}_create(){return this.$config.axios({method:"POST",url:this.endpoint(),data:this._getInstance()}).then((t=>this._setInstance(t.data)))}_update(){return this.$config.axios({method:"PUT",url:this.endpoint(),data:this._getInstance()}).then((t=>this._setInstance(t.data)))}_query(){var t="?";if(Object.keys(this.$config.fields).length>0&&(t+="fields["+this.$config.tablename+"]="+this.$config.fields[this.$config.tablename]+"&"),Object.keys(this.$config.filters).length>0){for(let i in this.$config.filters)t+="filter["+i+"]="+this.$config.filters[i]+"&";for(let i in this.$config.filter_oper)t+="filter_oper["+i+"]="+this.$config.filter_oper[i]+"&"}this.$config.sorts.length>0&&(t+="sort="+this.$config.sorts.join(",")+"&");for(let i in this.$config.payload)t+=i+"="+this.$config.payload[i]+"&";return t+="page="+this.$config.page+"&",t+="limit="+this.$config.limit+"&"}},Object.defineProperty(t,"__esModule",{value:!0})}));
function Table(tablename, axios) {
   return new dbquery.Model(tablename, axios, 'DBQuery');
}

